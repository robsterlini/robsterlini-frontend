<!doctype html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="utf-8">

    {% if not metaTitle %}
      {% set metaTitle %}Rob Sterlini{% endset %}
    {% endif %}

    {% if not metaDescription %}
      {% set metaDescription = "Rob Sterlini is a frontend developer, amateur triathlete, typography enthusiast, and LEGO master builder among other things" %}
    {% endif %}

    <!-- Primary meta tags -->
    <title>{{ metaTitle | safe }} – {{ metaTitleSuffix or "Rob Sterlini" }}</title>
    <meta name="title" content="{{ metaTitle }}">
    <meta name="description" content="{{ metaDescription }}">
    <meta name="google-site-verification" content="K74mLxYjMkRGdLWUB40XVTim2djLfxvKZEDsQ2grJ08" />

    {% if not metaImageTitle %}
      {% set metaImageTitle %}{{ heroTitle if heroTitle else "Rob Sterlini" }}{% endset %}
    {% endif %}
    {% if not metaImageHeader %}
      {% set metaImageHeader %}{{ metaTitle }}{% endset %}
    {% endif %}

    {% set metaImageText = {
      title: metaImageTitle,
      header: metaImageHeader
    } %}
    {% set metaImage = metaImageText | generateSocialImage %}
    {% set pageUrl = page.url | url | absoluteUrl(global.url) %}

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="{{ pageUrl }}">
    <meta property="og:title" content="{{ metaTitle }}">
    <meta property="og:description" content="{{ metaDescription }}">
    <meta property="og:image" content="{{ metaImage }}">
    <meta property="og:image:width" content="1440">
    <meta property="og:image:height" content="720">

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="{{ pageUrl }}">
    <meta property="twitter:title" content="{{ metaTitle }}">
    <meta property="twitter:description" content="{{ metaDescription }}">
    <meta property="twitter:image" content="{{ metaImage }}">

    <meta name="twitter:label1" value="{{ metaLabel1 or 'Let’s chat!'}}" />
    <meta name="twitter:data1" value="{{ metaData1 or global.email }}" />
    <meta name="twitter:label2" value="{{ metaLabel2 or 'Tweet me'}}" />
    <meta name="twitter:data2" value="{{ metaData2 or '@robsterlini' }}" />

    <!-- Author and generator -->
    <meta name="author" content="Rob Sterlini">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="generator" content="Eleventy, https://github.com/robsterlini/robsterlini-frontend">

    <link rel="alternate icon" type="image/png" href="/favicon.png">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">

    {% set webfonts = [
      "body-400",
      "body-600",
      "heading-600",
      "heading-600-sc"
    ] %}
    {% if hasBlockquote %}{% set webfonts = (webfonts.push("heading-400i"), webfonts) %}{% endif %}
    {% for webfont in webfonts %}<link rel="preload" href="/fonts/{{ webfont }}.woff2" as="font" type="font/woff2" crossorigin>
    {% endfor %}

    {% if hasInlineCode %}
    {% set inlineCodeFontCssUrl = "https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500&display=swap" %}
    <!-- Technique from https://csswizardry.com/2020/05/the-fastest-google-fonts/ -->
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preload" as="style" href="{{ inlineCodeFontCssUrl }}" />
    <link rel="stylesheet" href="{{ inlineCodeFontCssUrl }}" media="print" onload="this.media='all'" />

    <noscript><link rel="stylesheet" href="{{ inlineCodeFontCssUrl }}" /></noscript>
    {% endif %}

    {% set stylesScss %}{% include "styles.scss" %}{% endset %}
    <style>{{ stylesScss | inlineScss | safe }}
    {%- if customCss %}
      {%- set customScss %}{% include customCss %}{% endset %}{#
      #}{{ customScss | inlineScss | safe }}
    {%- endif %}</style>

    {% set noscriptScss %}{% include "noscript.scss" %}{% endset %}
    <noscript><style>{{ noscriptScss | inlineScss | safe }}</style></noscript>

    <!--<script defer src="https://unpkg.com/web-vitals@0.2.2/dist/web-vitals.es5.umd.min.js"></script>
    <script>
      addEventListener('DOMContentLoaded', function() {
        webVitals.getCLS(console.log);
        webVitals.getFID(console.log);
        webVitals.getLCP(console.log);
      });
    </script>-->
  </head>
  <body class="page">
    <div class="__grid" aria-hidden="true"><div class="group"></div></div>

    {% include "nav.njk" %}
    {{ content | safe }}
    {% include "footer.njk" %}

    <script type="text/javascript">
      (function () {
        function setFontsLoaded() {
          document.documentElement.className += ' fonts-loaded';
        }

        if (!('fonts' in document)) {
          setFontsLoaded();
          return;
        };

        var body400 = new FontFace(
          'rs-body',
          'url(/fonts/body-400.woff2) format(\'woff2\')',
          { weight: 300 }
        );

        var body600 = new FontFace(
          'rs-body',
          'url(/fonts/body-600.woff2) format(\'woff2\')',
          { weight: 500 }
        );

        var heading600 = new FontFace(
          'rs-heading',
          'url(/fonts/heading-600.woff2) format(\'woff2\')',
          { weight: 600 }
        );

        var heading600sc = new FontFace(
          'rs-heading-sc',
          'url(/fonts/heading-600-sc.woff2) format(\'woff2\')',
          { weight: 600 }
        );

        {% if hasBlockquote %}
          var heading400i = new FontFace(
            'rs-heading',
            'url(/fonts/heading-400i.woff2) format(\'woff2\')',
            { style: 'italic' }
          );
        {% endif %}

        Promise.all([
          body400.load(),
          body600.load(),
          heading600.load(),
          {% if hasBlockquote %}heading400i.load(),{% endif %}
          heading600sc.load()
        ]).then(function(loadedFonts) {

          // Render them at the same time
          loadedFonts.forEach(function(font) {
            document.fonts.add(font);
          });

          setFontsLoaded();
        });

        let observer;

        const figures = document.querySelectorAll('.figure');

        if ('IntersectionObserver' in window) {
          const observerConfig = {
            threshold: 0,
            rootMargin: '50% 0% -33.3% 0%',
          };

          observer = new IntersectionObserver((entries, self) => {
            const entry = entries[0];

            if (entry.isIntersecting) {
              entry.target.classList.add('js--figure-visible');
              self.unobserve(entry.target);
            }
          }, observerConfig);
        }

        figures.forEach(figure => {
          if (observer) {
            setTimeout(() => {
              observer.observe(figure);
            }, 1000); // Buys just enough time for the other animations to finish
          } else {
            figure.add('js--figure-visible');
          }
        });
      })();
    </script>

    {% include "components/theme-selector.html" %}
  </body>
</html>
