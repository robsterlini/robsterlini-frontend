<!doctype html>
<html lang="en" data-color-preference="auto" data-contrast-preference="auto">
  <head>
    <meta charset="utf-8">

    {% set meta_description = description if description else "Rob Sterlini is a frontend developer, typography enthusiast, amateur triathlete, and LEGO master builder among other things" %}

    <!-- Primary Meta Tags -->
    <title>{{ title }} – {{ title_suffix if title_suffix else "Rob Sterlini" }}</title>
    <meta name="title" content="{{ title }}">
    <meta name="description" content="{{ meta_description }}">
    <meta name="google-site-verification" content="K74mLxYjMkRGdLWUB40XVTim2djLfxvKZEDsQ2grJ08" />

    {% set socialImageText = {
      title: hero_h1 if hero_h1 else title,
      header: hero_header if hero_header else "Rob Sterlini"
    } %}
    {% set socialImage = socialImageText | generateSocialImage %}
    {% set pageUrl = page.url | url | absoluteUrl(global.url) %}

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="{{ pageUrl }}">
    <meta property="og:title" content="{{ title }}">
    <meta property="og:description" content="{{ meta_description }}">
    <meta property="og:image" content="{{ socialImage }}">
    <meta property="og:image:width" content="1440">
    <meta property="og:image:height" content="720">

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="{{ pageUrl }}">
    <meta property="twitter:title" content="{{ title }}">
    <meta property="twitter:description" content="{{ meta_description }}">
    <meta property="twitter:image" content="{{ socialImage }}">

    <meta name="twitter:label1" value="{{ meta_label1 if meta_label1 else 'Let’s chat!'}}" />
    <meta name="twitter:data1" value="{{ meta_data1 | generateMetaValue(global.email, page) }}" />
    <meta name="twitter:label2" value="{{ meta_label2 if meta_label2 else 'Tweet me'}}" />
    <meta name="twitter:data2" value="{{ meta_data2 | generateMetaValue('@robsterlini', page) }}" />

    <meta name="author" content="Rob Sterlini">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="generator" content="Eleventy, https://github.com/robsterlini/robsterlini-frontend">

    <link rel="alternate icon" type="image/png" href="/favicon.png">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">

    {% set webfonts = [
      "body-300",
      "body-500",
      "heading-600",
      "heading-600-sc"
    ] %}
    {% for webfont in webfonts %}<link rel="preload" href="/fonts/{{ webfont }}.woff2" as="font" type="font/woff2" crossorigin>
    {% endfor %}

    {% set stylesScss %}{% include "styles.scss" %}{% endset %}
    <style>{{ stylesScss | inlineScss | safe }}
    {%- if custom_css %}
      {%- set customScss %}{% include custom_css %}{% endset %}{#
      #}{{ customScss | inlineScss | safe }}
    {%- endif %}</style>

    {% set noscriptScss %}{% include "noscript.scss" %}{% endset %}
    <noscript><style>{{ noscriptScss | inlineScss | safe }}</style></noscript>

    <!--<script defer src="https://unpkg.com/web-vitals@0.2.2/dist/web-vitals.es5.umd.min.js"></script>
    <script>
      addEventListener('DOMContentLoaded', function() {
        webVitals.getCLS(console.log);
        webVitals.getFID(console.log);
        webVitals.getLCP(console.log);
      });
    </script>-->
  </head>
  <body class="page">
    {% include "nav.njk" %}
    {{ content | safe }}
    {% include "footer.njk" %}

    <script type="text/javascript">
      (function () {
        function setFontsLoaded() {
          document.documentElement.className += ' fonts-loaded';
        }

        if (!('fonts' in document)) {
          setFontsLoaded();
          return;
        };
        document.fonts.load('1em rsa-body').then(setFontsLoaded);

        function toggleMenu() {
          document.documentElement.classList.toggle('js--menu');
        };
        document.getElementById('toggle-menu').addEventListener('click', toggleMenu);
      })();

      (function () {
        const colorPreferenceSelect = document.getElementById('color-preference');
        const contrastPreferenceSelect = document.getElementById('contrast-preference');

        function setPreference(name, value) {
          localStorage.setItem(name + '-preference', value);
          document.documentElement.dataset[name + 'Preference'] = value;
        }

        function getPreference(name) {
          return localStorage.getItem(name + '-preference') || 'auto';
        }

        colorPreferenceSelect.addEventListener('change', function(e) {
          setPreference('color', e.target.value);
        });

        contrastPreferenceSelect.addEventListener('change', function(e) {
          setPreference('contrast', e.target.value);
        });

        if (window.matchMedia) {
          const lightMode = window.matchMedia('(prefers-color-scheme: light)');
          const highContrast = window.matchMedia('(prefers-contrast: high)');

          function setAutoPreferenceAutoLabel(preferenceSelect, label) {
            preferenceSelect[0].innerText = 'Auto (' + label + ')';
          }

          lightMode.addListener(function(e) {
            setAutoPreferenceAutoLabel(colorPreferenceSelect, e.matches);
          });

          highContrast.addListener(function(e) {
            setAutoPreferenceAutoLabel(contrastPreferenceSelect, e.matches);
          });

          setAutoPreferenceAutoLabel(colorPreferenceSelect, lightMode.matches ? 'Light' : 'Dark');
          setAutoPreferenceAutoLabel(contrastPreferenceSelect, highContrast.matches ? 'High' : 'Regular');
        }

        const colorPreference = getPreference('color');
        const contrastPreference = getPreference('contrast');

        colorPreferenceSelect.value = colorPreference;
        setPreference('color', colorPreference);

        contrastPreferenceSelect.value = contrastPreference;
        setPreference('contrast', contrastPreference);

        const highlightEl = function() {
          const element = document.getElementById(location.hash.replace('#', ''));

          if (!element) return;

          element.classList.add('js--highlight-anchor');

          setTimeout(() => {
            // TODO: Maybe change this for an animation end event listener
            element.classList.remove('js--highlight-anchor');
          }, 3000);
        }

        if (location.hash) {
          highlightEl();
        }

        window.addEventListener('hashchange', highlightEl, false);
      })();
    </script>
  </body>
</html>
